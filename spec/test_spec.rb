describe '四則演算' do
  context '足し算' do
    it '1 + 1 は 2 になる' do
      expect(1 + 1).to eq 2
    end
  end
  context '足し算' do
    it '1 + 1 は 2 になる' do
      expect(1 + 1).to eq 3
    end
  end
end

# このテストコードは以下の構成になっています。

# describe '四則演算のテストのグループ'
# context '足し算のテストをまとめている'
# it 'テストと具体的な内容を記述する'
# expect 'expectは（）内に期待値を記述する'
# to '期待している値が「~であること」を意味しています。(逆の場合はnot_toを使用します)'
# eq 'eq(イコール)はeqに続く値と、expectの期待値が同値であるかを判定しています'



# エクスペクテーションとマッチャー

# expect().toの部分は「()内の値が期待値となるように」という意味があり、エクスペクテーションと呼ばれます。
# eqはeqに続く値が期待値と同値であるかを判定しています。またeqの部分はマッチャーと呼ばれます。
# マッチャーはeqではなく様々な種類が存在しています。
# RSpecでは基本的にエクスペクテーションと様々なマッチャーの組み合わせでテストを行っていきます。



# フック

# 上記のサンプルコードにはありませんがRSpecには「フック」というものが存在します。
# よく使用されるフックに「before」があります。

# beforeは以下のようにitの処理をする前に行う処理を記述します。

# context 'バリデーションによって正しいデータ以外保存しない' do
#   before do
#     '例：タイトルが入力されていないデータの作成'
#   end
#   it 'タイトルが入力されていない時は保存しない' do
#   end
# end
# 主に複数のitに対して前提となる共通処理などに利用されます。



# マッチャーまとめ

# マッチャー名	      機能
# be_valid	          有効であるか
# be_invalid	        無効であるか
# include	            配列に指定の値が含まれているか
# find	              要素の検索を行う
# click	              クリックを行う
# have_content	      文字列が存在するか
# have_link	          指定の値のリンクが存在するか
# eq	                期待値と値を比較して一致するか
# have_selector	      HTMLタグやCSSに指定の文字列が存在するか
# have_field	        入力フォームが存在するか
# find_all	          ページ上の指定のHTMLタグを全て取得する
# match	match         メソッドを使用して期待値と一致するか
# have_button	        ページ上に指定のボタンが存在するか
# click_button	      指定のボタンをクリックする
# have_current_path	  パスを取得できる
# change	            ある動作Aに対してBが変動するか



# 実行結果

# 1行目にあるのがテスト全ての実行結果を示しています。
# 1 + 1 = 2 のテストは成功するので' . '
# 1 + 1 = 3 のテストは失敗するので' F ' (FailedのF)

# 次の部分はテストが失敗した部分の詳細を示しています。
# 'Failure/Error: expect(1 + 1).to eq 3' テストに失敗した部分
# 'expected: 3 got: 2' - expected：テストコードが期待していた値
# got：実際に返ってきた値

# '2 examples, 1 failure'の部分は'2つテストを実行して1つ失敗したという意味'
# 'rspec ./spec/test_spec.rb:8 # 四則演算 足し算 1 + 1 は 2 になる'
# ここの部分では失敗したテストを再度表示しています。